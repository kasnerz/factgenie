type: openai
model: gpt-3.5-turbo-1106
# model: "gpt-4-1106-preview"
system_msg: "You are an expert data-to-text error annotation system. You undestand structured data and you can correcly operate with units and numerical values. You are designed to output token-level annotations in JSON."
# The return format should be ["errors": {...}]
errors_categories: 
  - name: "Incorrect"
    color: "#ffbcbc"
  - name: "Not checkable"
    color: "#e9d2ff"
  - name: "Misleading"
    color: "#fff79f"
  - name: "Other"
    color: "#bbbbbb"
prompt_template: |
  Given the data:
  ```
  {data}
  ```
  Annotate all the errors in the following text:
  ```
  {text}
  ```
  Output the errors as a JSON list "errors" in which each object contains fields  "reason", "text", and "type". The value of "text" is the text of the error. The value of "reason" is the reason for the error. The value of "type" is one of {{0, 1, 2, 3}} based on the following list:
  - 0: Incorrect fact: The fact in the text contradicts the data.
  - 1: Not checkable: The fact in the text cannot be checked in the data.
  - 2: Misleading: The fact in the text is misleading in the given context.
  - 3: Other: The text is problematic for another reason, e.g. grammatically or stylistically incorrect, irrelevant, or repetitive.

  The list should be sorted by the position of the error in the text.

  *Example:*
  data:
  ```
  [ [ "Aditi Bhagwat", "occupation", "television actor" ], [ "Aditi Bhagwat", "date of birth", "18 January 1981" ] ]     
  ```
  text:
  ```
  Aditi Bhagwat, born on January 18, 1991, used to be a popular Indian television actor. The data comes from a knowledge graph.
  ```
  output:
  ```{{ "errors": [{{"reason": "The data mentions that the actor was born on 1981", "text": "1991", "type": 0}}, {{"reason": "Misleadingly suggests that the actor is not alive", "text": "used to be", type: 2}}, {{"reason": "Popularity is not mentioned in the data", "text": "popular", type: 1}}, {{"reason", "Nationality is not mentioned in the data", "text": "Indian", type: 1}}, {{"reason": "The note is superfluous", "text": "The data comes from a knowledge graph.", type: 3}}] }}
  ```
  Note that some details may not be mentioned in the text: do not count omissions as errors. Also do not be too strict: some facts can be less specific than in the data (rounded values, shortened or abbreviated text, etc.), do not count these as errors. If there are no errors in the text, "errors" will be an empty list.
